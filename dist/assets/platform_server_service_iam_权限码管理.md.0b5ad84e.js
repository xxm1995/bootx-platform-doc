import{_ as a,o as e,c as r,X as h}from"./chunks/framework.6909765d.js";const m=JSON.parse('{"title":"权限码管理","description":"","frontmatter":{},"headers":[],"relativePath":"platform/server/service/iam/权限码管理.md","filePath":"platform/server/service/iam/权限码管理.md"}'),s={name:"platform/server/service/iam/权限码管理.md"},t=h('<h1 id="权限码管理" tabindex="-1">权限码管理 <a class="header-anchor" href="#权限码管理">¶</a></h1><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>权限码同时与访问角色和数据角色都有关联，因为可以通过权限码可以控制访问权限中页面和接口的访问，也可以处理数据权限中的哪些字段可以被访问。 无论是通过访问角色还是数据角色进行关联， 但本质上都是一致的，到最终用户层面，会将访问角色和数据角色关联的权限进行合并去重，最终生成一个权限码集合。 所以，不要让权限码有歧义，防止一个权限码既能控制 访问权限，又能控制数据权限，导致分配后发生预期之外的情况</p></div><h2 id="权限码配置和分配" tabindex="-1">权限码配置和分配 <a class="header-anchor" href="#权限码配置和分配">¶</a></h2><h3 id="权限配置" tabindex="-1">权限配置 <a class="header-anchor" href="#权限配置">¶</a></h3><blockquote><p>权限码虽然在存储中是单独存储，但为了方便进行配置，在配置界面会与菜单进行关联，便于我们对不同的权限码进行分组和筛选。</p></blockquote><h3 id="访问角色分配" tabindex="-1">访问角色分配 <a class="header-anchor" href="#访问角色分配">¶</a></h3><h3 id="数据角色分配" tabindex="-1">数据角色分配 <a class="header-anchor" href="#数据角色分配">¶</a></h3><h2 id="注解使用" tabindex="-1">注解使用 <a class="header-anchor" href="#注解使用">¶</a></h2><h3 id="访问请求控制" tabindex="-1">访问请求控制 <a class="header-anchor" href="#访问请求控制">¶</a></h3><h3 id="字段权限" tabindex="-1">字段权限 <a class="header-anchor" href="#字段权限">¶</a></h3><h3 id="页面元素控制" tabindex="-1">页面元素控制 <a class="header-anchor" href="#页面元素控制">¶</a></h3>',11),c=[t];function d(o,i,n,_,l,p){return e(),r("div",null,c)}const b=a(s,[["render",d]]);export{m as __pageData,b as default};
