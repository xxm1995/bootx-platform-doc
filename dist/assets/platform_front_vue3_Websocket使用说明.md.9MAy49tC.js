import{_ as s,c as i,o as a,V as e}from"./chunks/framework.TiLr8DIm.js";const g=JSON.parse('{"title":"Mixin使用","description":"","frontmatter":{},"headers":[],"relativePath":"platform/front/vue3/Websocket使用说明.md","filePath":"platform/front/vue3/Websocket使用说明.md","lastUpdated":1692782764000}'),n={name:"platform/front/vue3/Websocket使用说明.md"},l=e(`<h1 id="mixin使用" tabindex="-1">Mixin使用 <a class="header-anchor" href="#mixin使用">¶</a></h1><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>基于<code>vueuse</code>中的<code>useWebSocket</code>进行开发，<a href="https://vueuse.org/core/useWebSocket" target="_blank" rel="noreferrer">useWebSocket文档地址</a>。 同时提供默认的全局消息通知功能实现<code>UserGlobalWebSocker</code>。</p></div><h2 id="usewebsocket介绍" tabindex="-1">useWebSocket介绍 <a class="header-anchor" href="#usewebsocket介绍">¶</a></h2><h3 id="引用" tabindex="-1">引用 <a class="header-anchor" href="#引用">¶</a></h3><p>项目中默认已经引入<code>vueuse</code>库，通过下述方式进行引入</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { useWebSocket } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@vueuse/core&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">status</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">send</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">open</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">close</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useWebSocket</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;ws://websocketurl&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="常用参数" tabindex="-1">常用参数 <a class="header-anchor" href="#常用参数">¶</a></h3><ul><li><code>immediate</code> 自动连接（默认启用）</li><li><code>autoClose</code> 自动关闭连接（默认启用）</li><li><code>autoReconnect</code> 自动重新连接错误（默认禁用）</li><li><code>heartbeat</code> 每个给定时间发送一条小消息（心跳）以保持连接处于活动状态（默认禁用）</li></ul><h3 id="回调函数" tabindex="-1">回调函数 <a class="header-anchor" href="#回调函数">¶</a></h3><ul><li><code>onConnected</code> 连接成功回调</li><li><code>onDisconnected</code> 关闭连接回调</li><li><code>onError</code> 错误回调</li><li><code>onMessage</code> 接收到消息回调</li></ul><h2 id="用户全局消息通知" tabindex="-1">用户全局消息通知 <a class="header-anchor" href="#用户全局消息通知">¶</a></h2><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>登录系统后会自动建立一个当前用户的<code>Websocket</code>连接，后端可以通过这个连接将信息主动推送给指定用户的前端上，前端组件可以可以根据配置监听不同的信息事件， 类似生产者/订阅者模式</p></div><h3 id="使用" tabindex="-1">使用 <a class="header-anchor" href="#使用">¶</a></h3><p>导入<code>WebsocketNotice</code>组件，使用提供的方法来订阅指定主题的消息，和取消对应主题的订阅。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { publishWsEvent, listenerEvent } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;/@/logics/websocket/WebsocketNotice&#39;</span></span></code></pre></div><h3 id="方法介绍" tabindex="-1">方法介绍 <a class="header-anchor" href="#方法介绍">¶</a></h3><ul><li>publishWsEvent 发布事件 <ul><li>key 服务端websocket事件通知类型</li><li>data 消息内容</li></ul></li><li>listenerEvent <ul><li>key 服务端websocket事件通知类型，见前端工程<code>WsListenerEnum</code>枚举类</li><li>callback 回调处理方法</li></ul></li><li>clearEventsByKey 清除指定key所关联的事件监听 <ul><li>key 服务端websocket事件通知类型，见前端工程<code>WsListenerEnum</code>枚举类</li></ul></li><li>clearEvent <ul><li>清除指定事件的监听（一个key可以对应多个回调事件）</li></ul></li></ul><h3 id="示例" tabindex="-1">示例 <a class="header-anchor" href="#示例">¶</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { onMounted, onUnmounted } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { clearEvent, listenerEvent } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;/@/logics/websocket/WebsocketNotice&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { useMessage } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;/@/hooks/web/useMessage&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">createMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 监听全局事件</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> onGlobalMessage</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">msg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    createMessage.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;接收到本页面的全局消息: &#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> msg)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  onMounted</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 监听 通知消息更新</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    listenerEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;EVENT_TEST_WEBSOCKET&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, onGlobalMessage)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  onUnmounted</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 解除监听 通知消息更新  </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    clearEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;EVENT_TEST_WEBSOCKET&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, onGlobalMessage)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })</span></span></code></pre></div>`,19),t=[l];function h(k,p,d,r,c,o){return a(),i("div",null,t)}const y=s(n,[["render",h]]);export{g as __pageData,y as default};
