import{_ as s,c as i,o as a,a8 as n}from"./chunks/framework.riYNsadV.js";const E=JSON.parse('{"title":"项目前端部署","description":"","frontmatter":{},"headers":[],"relativePath":"platform/overview/config/前端部署.md","filePath":"platform/overview/config/前端部署.md","lastUpdated":1710317337000}'),p={name:"platform/overview/config/前端部署.md"},e=n(`<h1 id="项目前端部署" tabindex="-1">项目前端部署 <a class="header-anchor" href="#项目前端部署">¶</a></h1><h2 id="项目构建" tabindex="-1">项目构建 <a class="header-anchor" href="#项目构建">¶</a></h2><p>Node版本需要使用16+，包管理工具使用<code>pnpm</code>，构建完后的制品在<code>dist</code>文件夹下，</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 安装依赖</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 执行打包命令</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span></span></code></pre></div><h2 id="使用nginx部署" tabindex="-1">使用Nginx部署 <a class="header-anchor" href="#使用nginx部署">¶</a></h2><h2 id="嵌入到jar中" tabindex="-1">嵌入到Jar中 <a class="header-anchor" href="#嵌入到jar中">¶</a></h2><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>可以利用Java容器可以将前端嵌入到后端Jar包中，在启动后端时同时一块将前端启动，</p></div><h3 id="修改路由模式" tabindex="-1">修改路由模式 <a class="header-anchor" href="#修改路由模式">¶</a></h3><blockquote><p>将前端的路由模式配置为<code>hash</code>模式，不可以使用<code>history</code>模式。在前端 <code>src/router/index.ts</code>文件中进行更改</p></blockquote><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { createRouter, createWebHashHistory, createWebHistory } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vue-router&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createRouter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 将web历史模式替换为hash模式</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  history: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createWebHashHistory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h3 id="修改发布路径和接口前缀" tabindex="-1">修改发布路径和接口前缀 <a class="header-anchor" href="#修改发布路径和接口前缀">¶</a></h3><div class="tip custom-block"><p class="custom-block-title">提示</p><ul><li><p>默认Vue打包后的产物在放到Web容器根目录下，有时候我们需要放到一个子目录下，此时前端访问就会有问题，需要我们在打包前配置一下前端的发布路径。</p></li><li><p>默认模式下请求路径前缀在嵌入模式中可能会不适用，需要更改一下访问的接口前缀，来让请求直接请求到我们的后端服务上。</p></li></ul></div><p><strong>修改.env.xx文件</strong></p><div class="language-properties vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">properties</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 发布路径</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">VITE_PUBLIC_PATH</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=/front</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 接口前缀</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">VITE_GLOB_API_URL_PREFIX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=/</span></span></code></pre></div><blockquote><p>不同类型的前端项目配置可能不同，需要根据自己的项目进行修改。</p></blockquote><h3 id="添加到后端项目中" tabindex="-1">添加到后端项目中 <a class="header-anchor" href="#添加到后端项目中">¶</a></h3><div class="warning custom-block"><p class="custom-block-title">警告</p><p>这种方式如果接口地址根目录，将会请求异常，等待后续完善</p></div><blockquote><p>在后端项目中<code>resources</code>目录下创建<code>static</code>目录，将前端构建的产物拷贝到该目录下，可以根据需要创建子目录文件夹，来保证不会与后端中的路径冲突，这样就可以将前端嵌入到后端中了，</p></blockquote><p>添加到后端项目中后，访问时默认需要访问<code>前端所在的目录/index.html#/*</code>，这样用起来会稍显繁琐，我们可以创建一个<code>Controller</code>控制器做一下处理，转发对应请求来简化访问路径。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> org.springframework.stereotype.Controller;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> org.springframework.web.bind.annotation.GetMapping;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> org.springframework.web.bind.annotation.RequestMapping;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 嵌入式h5项目转发控制器, 不用输入 index.html也可以正常访问</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@author</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> xxm</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@since</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> 2024/2/10</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Controller</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RequestMapping</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RedirectH5Controller</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     * 将/h5/*的访问请求代理到/h5/index.html*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">GetMapping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/h5/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toH5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;forward:/h5/index.html&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,20),l=[e];function t(h,k,r,d,c,o){return a(),i("div",null,l)}const y=s(p,[["render",t]]);export{E as __pageData,y as default};
