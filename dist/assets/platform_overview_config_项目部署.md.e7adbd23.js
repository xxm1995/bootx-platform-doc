import{_ as s,o as a,c as n,X as l}from"./chunks/framework.6909765d.js";const D=JSON.parse('{"title":"项目部署","description":"","frontmatter":{},"headers":[],"relativePath":"platform/overview/config/项目部署.md","filePath":"platform/overview/config/项目部署.md"}'),e={name:"platform/overview/config/项目部署.md"},o=l(`<h1 id="项目部署" tabindex="-1">项目部署 <a class="header-anchor" href="#项目部署">¶</a></h1><h2 id="后端部署" tabindex="-1">后端部署 <a class="header-anchor" href="#后端部署">¶</a></h2><h3 id="项目构建" tabindex="-1">项目构建 <a class="header-anchor" href="#项目构建">¶</a></h3><p>首先在项目中执行<code>mvn clean install -Dmaven.javadoc.skip=true</code>命令进行构建，<code>-Dmaven.javadoc.skip=true</code>是跳过DOC文档相关的构造， 可以加快构建的速度。构建执行完成后，到项目下<code>bootx-start</code>模块下的<code>target</code>目录中找到<code>bootx-start.jar</code>文件，这个文件就是我们所需要的可执行Jar包</p><h3 id="jar包方式部署" tabindex="-1">jar包方式部署 <a class="header-anchor" href="#jar包方式部署">¶</a></h3><ol><li>在主机中安装jdk</li><li>将构建出的Jar上传到主机上，然后执行 <code>java -jar bootx-start.jar</code></li></ol><h3 id="docker部署" tabindex="-1">docker部署 <a class="header-anchor" href="#docker部署">¶</a></h3><blockquote><p>默认项目中已经提供已经编写好的<code>Dockerfile</code>，可以直接根据这个配置文件进行构建Docker镜像，推荐启动时使用<code>Docker-Compose</code>，方便进行进行管理，</p></blockquote><p><strong>启动命令</strong></p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">run</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-p</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">9999</span><span style="color:#C3E88D;">:9999</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">bootx-start</span></span></code></pre></div><p><strong>Dockerfile文件</strong></p><div class="language-dockerfile"><button title="Copy Code" class="copy"></button><span class="lang">dockerfile</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># java8基础镜像</span></span>
<span class="line"><span style="color:#F78C6C;">FROM</span><span style="color:#A6ACCD;"> registry.cn-beijing.aliyuncs.com/xxm1995/java8</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 作者信息</span></span>
<span class="line"><span style="color:#F78C6C;">MAINTAINER</span><span style="color:#A6ACCD;"> bootx</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 时区设置</span></span>
<span class="line"><span style="color:#F78C6C;">ENV</span><span style="color:#A6ACCD;"> TZ=Asia/Shanghai</span></span>
<span class="line"><span style="color:#F78C6C;">RUN</span><span style="color:#A6ACCD;"> ln -sf /usr/share/zoneinfo/$TZ /etc/localtime &amp;&amp; echo $TZ &gt; /etc/timezone</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 启动命令</span></span>
<span class="line"><span style="color:#F78C6C;">ENV</span><span style="color:#A6ACCD;"> JAVA_COMM=</span><span style="color:#C3E88D;">&quot;-Djava.security.egd=file:/dev/./urandom -Dfile.encoding=UTF-8&quot;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 启动选项配置</span></span>
<span class="line"><span style="color:#F78C6C;">ENV</span><span style="color:#A6ACCD;"> JAVA_OPTS=</span><span style="color:#C3E88D;">&quot;&quot;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># Agent配置</span></span>
<span class="line"><span style="color:#F78C6C;">ENV</span><span style="color:#A6ACCD;"> JAVA_AGENT=</span><span style="color:#C3E88D;">&quot;&quot;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 参数配置</span></span>
<span class="line"><span style="color:#F78C6C;">ENV</span><span style="color:#A6ACCD;"> JAVA_ARGS=</span><span style="color:#C3E88D;">&quot;&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 工作目录</span></span>
<span class="line"><span style="color:#F78C6C;">WORKDIR</span><span style="color:#A6ACCD;"> /</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 端口暴露</span></span>
<span class="line"><span style="color:#F78C6C;">EXPOSE</span><span style="color:#A6ACCD;"> 9999</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 添加执行jar包</span></span>
<span class="line"><span style="color:#F78C6C;">ADD</span><span style="color:#A6ACCD;"> bootx-start/target/bootx-start.jar bootx-start.jar</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 执行启动命令</span></span>
<span class="line"><span style="color:#F78C6C;">CMD</span><span style="color:#A6ACCD;"> java -jar $JAVA_OPTS $JAVA_AGENT $JAVA_COMM bootx-start.jar $JAVA_ARGS</span></span></code></pre></div><h3 id="docker-compose部署" tabindex="-1">docker-compose部署 <a class="header-anchor" href="#docker-compose部署">¶</a></h3><p>Docker-Compose是一个轻量级的单机Docker容器编排工具</p><h3 id="kubernetes部署" tabindex="-1">kubernetes部署 <a class="header-anchor" href="#kubernetes部署">¶</a></h3><h2 id="前端部署" tabindex="-1">前端部署 <a class="header-anchor" href="#前端部署">¶</a></h2><h3 id="项目构建-1" tabindex="-1">项目构建 <a class="header-anchor" href="#项目构建-1">¶</a></h3><p>Node版本需要使用16+，包管理工具使用<code>pnpm</code>，构建完后的制品在<code>dist</code>文件夹下，</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 安装依赖</span></span>
<span class="line"><span style="color:#FFCB6B;">pnpm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">install</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 执行打包命令</span></span>
<span class="line"><span style="color:#FFCB6B;">pnpm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">run</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">build</span></span></code></pre></div><h3 id="使用nginx部署" tabindex="-1">使用Nginx部署 <a class="header-anchor" href="#使用nginx部署">¶</a></h3><h3 id="嵌入到jar中" tabindex="-1">嵌入到Jar中 <a class="header-anchor" href="#嵌入到jar中">¶</a></h3><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>可以利用Java容器可以处理，嵌入到后端Jar包中，在启动后端时同时一块将前端启动</p></div><h4 id="修改路由模式" tabindex="-1">修改路由模式 <a class="header-anchor" href="#修改路由模式">¶</a></h4><p>将前端的路由模式配置为<code>hash</code>模式，不可以使用<code>history</code>模式。在前端 <code>src/router/index.ts</code>文件中进行更改</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">createRouter</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">createWebHashHistory</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">createWebHistory</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">vue-router</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">createRouter</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 将web历史模式替换为下面的</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// history: createWebHashHistory(),</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 使用这个</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">history</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">createWebHistory</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h4 id="添加带后端项目中" tabindex="-1">添加带后端项目中 <a class="header-anchor" href="#添加带后端项目中">¶</a></h4><h3 id="阿里云效自动化部署" tabindex="-1">阿里云效自动化部署 <a class="header-anchor" href="#阿里云效自动化部署">¶</a></h3>`,27),p=[o];function t(c,r,i,y,d,C){return a(),n("div",null,p)}const A=s(e,[["render",t]]);export{D as __pageData,A as default};
