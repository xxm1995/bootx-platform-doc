import{_ as s,o as a,c as n,X as l}from"./chunks/framework.6909765d.js";const A=JSON.parse('{"title":"Spring 功能扩展","description":"","frontmatter":{},"headers":[],"relativePath":"platform/server/common/Spring功能扩展.md","filePath":"platform/server/common/Spring功能扩展.md"}'),o={name:"platform/server/common/Spring功能扩展.md"},p=l(`<h1 id="spring-功能扩展" tabindex="-1">Spring 功能扩展 <a class="header-anchor" href="#spring-功能扩展">¶</a></h1><h2 id="功能" tabindex="-1">功能 <a class="header-anchor" href="#功能">¶</a></h2><ul><li>启用hutool的<code>SpringUtil</code>工具类，直接可以使用</li><li>配置线程池，并用TTL进行包装，用于异步线程中获取环境数据，如请求头信息</li><li>提供<code>@CountTime</code>方法计时注解，快速打印方法耗时时间</li><li>提供<code>CorsFilter</code>过滤器处理跨域请求，自动处理跨域问题</li></ul><h2 id="使用" tabindex="-1">使用 <a class="header-anchor" href="#使用">¶</a></h2><h3 id="线程池使用说明" tabindex="-1">线程池使用说明 <a class="header-anchor" href="#线程池使用说明">¶</a></h3><p>线程池使用时需要进行指定配置的TTL包装过的线程池，否则会发生线程变量丢失的问题，这两个线程池分别是</p><ul><li><code>ExecutorService</code> <code>bean</code>名称为：asyncExecutorService</li><li><code>Executor</code> <code>bean</code>名称为：asyncExecutor</li></ul><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">org</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">springframework</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">scheduling</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">annotation</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">Async</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">java</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">util</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">concurrent</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">Executor</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">java</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">util</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">concurrent</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">ExecutorService</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Component</span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">RequiredArgsConstructor</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">TestController</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 执行器</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">final</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Executor</span><span style="color:#A6ACCD;"> asyncExecutor</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 执行器服务</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">final</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">ExecutorService</span><span style="color:#A6ACCD;"> asyncExecutorService</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 异步方法指定线程池</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Async</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">asyncExecutor</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">sendHtmlMail</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">MailMailParam</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">mailParam</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h3 id="counttimeaop使用" tabindex="-1"><code>@CountTimeAop</code>使用 <a class="header-anchor" href="#counttimeaop使用">¶</a></h3><blockquote><p>注解放在方法上即可生效，注意标注的方法需要可能内Spring Aop切面获取到，否则不生效</p></blockquote><p>参数:</p><ul><li>实现中</li></ul><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">CountTime</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">addRolePath</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">Long</span><span style="color:#A6ACCD;"> roleId</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">List</span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">Long</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> permissionIds</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h3 id="corsfilter使用" tabindex="-1"><code>CorsFilter</code>使用 <a class="header-anchor" href="#corsfilter使用">¶</a></h3><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>过滤器过滤器默认开启，可以通过配置文件进行关闭</p></div><h2 id="参数配置" tabindex="-1">参数配置 <a class="header-anchor" href="#参数配置">¶</a></h2><div class="language-yaml"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F07178;">bootx</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">common</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">spring</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;"># 开启cors跨域处理</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">cors</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;"># 允许跨域发送身份凭证 </span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">enable</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;"># 预检请求有效期(秒)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">max-age</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3600</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;"># 允许的请求头</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">allowed-headers</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> *</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;"># 允许的请求方法</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">allowed-methods</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> *</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;"># 允许跨域的源为，注意与origin:进行区分</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">allowed-origin-patterns</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> *</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">executor</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;"># 线程池维护线程的最少数量</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">core-pool-size</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;"># 缓存队列容量</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">max-pool-size</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">50</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;"># 缓存队列容量</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">queue-capacity</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">5000</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;"># 保持活动秒数</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">keep-alive-seconds</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">60</span></span></code></pre></div><h2 id="相关类" tabindex="-1">相关类 <a class="header-anchor" href="#相关类">¶</a></h2><ul><li><code>CountTimeAop</code> 方法执行耗时记录处理切面</li><li><code>AsyncExecutorConfiguration</code> 异步线程池配配置，使用TTL容器进行包装</li><li><code>WebServletUtil</code> web服务器工具类，可以获取当前请求的 <code>HttpServletRequest</code> 对象</li><li><code>SpringCorsConfiguration</code> Cors跨域处理配置</li></ul>`,19),e=[p];function c(t,r,y,i,D,C){return a(),n("div",null,e)}const d=s(o,[["render",c]]);export{A as __pageData,d as default};
