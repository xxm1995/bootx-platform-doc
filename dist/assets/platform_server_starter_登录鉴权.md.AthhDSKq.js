import{_ as s,c as i,o as a,V as e}from"./chunks/framework.OTU5OxHT.js";const g=JSON.parse('{"title":"鉴权框架封装模块","description":"","frontmatter":{},"headers":[],"relativePath":"platform/server/starter/登录鉴权.md","filePath":"platform/server/starter/登录鉴权.md","lastUpdated":1692627846000}'),n={name:"platform/server/starter/登录鉴权.md"},t=e(`<h1 id="鉴权框架封装模块" tabindex="-1">鉴权框架封装模块 <a class="header-anchor" href="#鉴权框架封装模块">¶</a></h1><div class="tip custom-block"><p class="custom-block-title">介绍</p><p>基于<code>Sa-Token</code>和<code>justAuth</code>进行封装，未选择Spring Security原因是复杂度较高，且同时对在前后端分离环境下支持一般。未选择<code>Shiro</code>是因为<code>Sa-Token</code>已经足够成熟， API对中小项目来说更加直观和简单易用。注意：管理员用户拥有最高的权限，不受权限控制，默认拥有所有数据和接口的权限。</p><p>Sa-Token官网：<a href="https://sa-token.cc/" target="_blank" rel="noreferrer">https://sa-token.cc/</a></p><p>justAuth官网：<a href="https://justauth.wiki/" target="_blank" rel="noreferrer">https://justauth.wiki/</a></p><p>更详细的内容可以查看 <a href="/platform/server/service/iam/权限体系.html">身份识别与访问管理</a> 下的具体模块,有更详细的说明。</p></div><h2 id="功能" tabindex="-1">功能 <a class="header-anchor" href="#功能">¶</a></h2><ul><li>提供账号密码登陆功能</li><li>提供第三方登录扩展</li><li>支持配置多端登录</li><li>支持忽略鉴权注解<code>@IgnoreAuth</code>的功能支持</li><li>支持通过权限码来控制接口是否可以请求</li><li>支持通过配置请求资源与角色关系来控制是否可以请求</li><li>提供<code>PasswordEncoder</code>密码工具类和<code>SecurityUtil</code>安全工具类</li></ul><h2 id="tokenservice登录服务" tabindex="-1">TokenService登录服务 <a class="header-anchor" href="#tokenservice登录服务">¶</a></h2><p>认证相关服务的封装类，用于处理接收到的用户登录请求，并根据传输过来的数据选择对应的处理方式。其中<code>client</code>和<code>loginType</code>参数必须传输：</p><h2 id="核心接口说明" tabindex="-1">核心接口说明 <a class="header-anchor" href="#核心接口说明">¶</a></h2><h3 id="abstractauthentication" tabindex="-1">AbstractAuthentication <a class="header-anchor" href="#abstractauthentication">¶</a></h3><p>抽象认证器，是各类认证器的根接口，<code>UsernamePasswordAuthentication</code>和<code>OpenIdAuthentication</code>都是它的子接口， 如果要扩展新的登录方式，通常是实现它或者他的子接口和继承它的实现类。例如短信登录<code>PhoneLoginHandler</code>就是实现的这个接口。</p><h3 id="getauthclientservice" tabindex="-1">GetAuthClientService <a class="header-anchor" href="#getauthclientservice">¶</a></h3><p>用来获取认证终端的接口声明，在登录处理时，需要知道当前是哪类终端进行的登录，所以这个接口必须要被实现，并且注册到<code>Bean</code>容器中，否则无法进行登录流程， 项目也无法启动。目前<code>IAM</code>模块已做实现。</p><h3 id="getauthlogintypeservice" tabindex="-1">GetAuthLoginTypeService <a class="header-anchor" href="#getauthlogintypeservice">¶</a></h3><p>用来获取认证登录方式对象的声明，在登录处理时，需要知道当前是哪种登录方式，所以这个接口必须要被实现，并且注册到<code>Bean</code>容器中，否则无法进行登录流程， 项目也无法启动。目前<code>IAM</code>模块已做实现。</p><h3 id="openidauthentication" tabindex="-1">OpenIdAuthentication <a class="header-anchor" href="#openidauthentication">¶</a></h3><p><code>AbstractAuthentication</code>接口的一个实现，主要用在封装第三方登录的场景，例如企业微信、钉钉、QQ等方式。配合<code>ThirdLoginService</code>服务类可以快速接入新的第三方登录， 可以参照系统中已完成的<code>DingTalkLoginHandler</code>、<code>WeChatLoginHandler</code>、<code>WeComLoginHandler</code>等处理类。</p><h3 id="routercheck" tabindex="-1">RouterCheck <a class="header-anchor" href="#routercheck">¶</a></h3><p>路由拦截检查，接收到用户访问的请求后，依次通过各实现类的<code>check</code>方法判定返回的<code>true</code>或<code>false</code>，来控制是否放行请求，目前已经有下列实现：</p><ul><li><code>IgnoreAdminUserRouterCheck</code> 超级管理员跳过各种限制</li><li><code>IgnoreAnnotationRouterCheck</code> 注解方式过滤判定</li><li><code>IgnorePathRouterCheck</code> 跳过不启用权限控制的路径</li><li><code>UserPathRouterCheck</code> 用户是否拥有路径访问方式检查</li><li><code>PermCodeRouterCheck</code> 权限码方式请求路径拦截</li></ul><h3 id="usernamepasswordauthentication" tabindex="-1">UsernamePasswordAuthentication <a class="header-anchor" href="#usernamepasswordauthentication">¶</a></h3><p>通过实现该接口，就可以实现认证鉴权中最经典的用户账号密码登录，目前系统中<code>PasswordLoginHandler</code>类实现了该接口。</p><h2 id="注解和工具类" tabindex="-1">注解和工具类 <a class="header-anchor" href="#注解和工具类">¶</a></h2><h3 id="ignoreauth" tabindex="-1">@IgnoreAuth <a class="header-anchor" href="#ignoreauth">¶</a></h3><p>忽略鉴权注解，可以加在<code>Controller</code>的方法或类上，访问时不在进行鉴权，加在非<code>Controller</code>的地方无效，在<code>Controller</code>类和方法同时添加此注解时，以方法上的注解为准，注解配置如下：</p><ul><li><code>ignore</code> 是否忽略请求鉴权，默认为<code>true</code>，未登录也可以访问</li><li><code>login</code> 只要登录就忽略权限校验, 在<code>ignore</code>为<code>false</code>时生效，默认为<code>false</code></li></ul><h3 id="ignoreauth-sa-token自带注解" tabindex="-1">@IgnoreAuth(Sa-Token自带注解) <a class="header-anchor" href="#ignoreauth-sa-token自带注解">¶</a></h3><p>忽略认证：表示被修饰的方法或类无需进行注解认证和路由拦截认证</p><blockquote><p>请注意：此注解的忽略效果只针对 SaInterceptor拦截器 和 APO注解鉴权 生效，对自定义拦截器与过滤器不生效</p></blockquote><h3 id="permcode" tabindex="-1">@PermCode <a class="header-anchor" href="#permcode">¶</a></h3><p>权限码注解，在认证中主要用来控制哪些用户和角色可以访问，通过在<code>Controller</code>类或者它的方法上标注此注解，就可以对访问权限进行控制。</p><blockquote><p>请注意: 加在非<code>Controller</code>的地方无效，在<code>Controller</code>类和方法同时添加此注解时，以方法上的注解为准。</p></blockquote><h3 id="passwordencoder" tabindex="-1">PasswordEncoder <a class="header-anchor" href="#passwordencoder">¶</a></h3><p>密码编码工具类，对原始密码进行摘要加密，通常用在注册、修改密码、重置密码等场合。</p><h3 id="securityutil" tabindex="-1">SecurityUtil <a class="header-anchor" href="#securityutil">¶</a></h3><p>安全工具类，主要功能就是用来获取当前登录用户的信息。</p><h2 id="第三方登录" tabindex="-1">第三方登录 <a class="header-anchor" href="#第三方登录">¶</a></h2><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>主要基于<code>OpenIdAuthentication</code>接口进行实现，然后通过<code>ThirdLoginController</code>来处理生成授权页与接收三方登录的回调消息。 目前已经对接了<code>微信公众平台</code>、<code>微信开放平台</code>、<code>钉钉</code>、<code>企业微信</code>四种，其中微信公众平台跟其他的不太一致， 需要查看<a href="./第三方平台对接.html">第三方平台对接</a>中的说明。</p><p>认证的过程基本上都是<code>OAuth</code>方式，可以阅读justAuth官网的文档进行了解，地址：<a href="https://justauth.wiki/guide/quickstart/oauth/" target="_blank" rel="noreferrer">OAuth流程</a></p></div><h2 id="配置说明" tabindex="-1">配置说明 <a class="header-anchor" href="#配置说明">¶</a></h2><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">bootx.starter.auth</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 盐值</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  salt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">yanzhi</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 默认密码</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  defaultPassword</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">123456</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 开启超级管理员，开启后可以登录超级管理员账号，超级管理员有系统中最高的权限。推荐生产模式关闭此选项</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  enableAdmin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 不进行鉴权的路径</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  ignoreUrls</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/actuator/**&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/v2/api-docs&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/doc.html&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/webjars/**&#39;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 第三方登录</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  third-login</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    ding-talk</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      # 登录成功后的回调地址</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      redirect-uri</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">http://127.0.0.1:9999/auth/third/callback/dingTalk</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      # 客户端Secret：对应各平台的appSecret</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      client-secret</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: ??</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      # 客户端id：对应各平台的appKey</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      client-id</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ??</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    we-com</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      redirect-uri</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">http://127.0.0.1:9999/auth/third/callback/weCom</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      client-secret</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: ??</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      client-id</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ??</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      # 企业微信，授权方的网页应用ID </span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      agent-id</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ??</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 微信开放平台</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    we-chat-open</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      redirect-uri</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">http://127.0.0.1:9999/auth/third/callback/weChat</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      client-id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: ??</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      client-secret</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ??</span></span></code></pre></div>`,38),h=[t];function l(r,c,d,p,o,k){return a(),i("div",null,h)}const u=s(n,[["render",l]]);export{g as __pageData,u as default};
