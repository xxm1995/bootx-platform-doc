import{_ as e,c as a,o,a8 as l}from"./chunks/framework.riYNsadV.js";const g=JSON.parse('{"title":"访问权限","description":"","frontmatter":{},"headers":[],"relativePath":"platform/server/service/iam/访问权限管理.md","filePath":"platform/server/service/iam/访问权限管理.md","lastUpdated":1692627846000}'),t={name:"platform/server/service/iam/访问权限管理.md"},r=l('<h1 id="访问权限" tabindex="-1">访问权限 <a class="header-anchor" href="#访问权限">¶</a></h1><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>访问权限用于控制用户对资源的访问，主要分为后端接口和前端页面两种，其中页面是否可以访问通过菜单管理进行了实现，所以此处访问权限对前端只关注处理页面中的元素， 例如按钮、表单项、表格列等。</p></div><h2 id="权限类别" tabindex="-1">权限类别 <a class="header-anchor" href="#权限类别">¶</a></h2><h3 id="常规角色鉴权接口" tabindex="-1">常规角色鉴权接口 <a class="header-anchor" href="#常规角色鉴权接口">¶</a></h3><p>该类型的接口如果配置完毕后，而没有进行任何的权限集分配的话，那么就只允许超级管理员进行访问而已，如果要使用该类型的接口，那么必须进行权限的分配。</p><p>讲一个接口设置为常规角色鉴权接口，通常有下列两种方式:</p><ul><li>可视化配置，通常一个接口不进行特殊配置的话，默认就是需要进行鉴权的。通过管理后台对接口进行配置，此时这个接口作为一类权限资源，可以通过分配给角色进行控制。</li><li>借助权限码实现，通过在Controller类或方法上添加<code>@PermCode</code>注解，就可以将访问接口纳入权限码的管理中，此时会根据角色所拥有的权限码进行鉴权。</li></ul><p>用户可以访问的方式：</p><ul><li>用户作为超级管理员账号的话，拥有对所有用户、角色、菜单、接口、权限的完全控制权，就算不进行配置也默认拥有所有权限</li><li>用户拥有某个角色，并且角色拥有某个权限码，那么用户就可以访问这个权限码对应的接口</li><li>用户拥有某个角色，并且角色拥有对应的访问权限资源，那么用户就可以访问这个对应的接口</li></ul><p>例子：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"></span></code></pre></div><h3 id="公开可访问接口" tabindex="-1">公开可访问接口 <a class="header-anchor" href="#公开可访问接口">¶</a></h3><p>公开可访问接口，无需进行角色权限校验以及不会进行用户信息的收集，此类型接口不会获取用户信息，也不可以强制必须获取用户信息，例如登录接口、注册接口、获取验证码接口、获取短信接口等。</p><p>通常用下列集中方式标识接口为公开可访问的:</p><ul><li>在<code>bootx.starter.auth.ignoreUrls</code>中配置该接口路径，在访问是将不会进行鉴权</li><li>在<code>Controller</code>类上添加<code>@IgnoreAuth</code>注解，该注解标识该Controller下的所有接口都不需要鉴权</li><li>在<code>Controller</code>类中的方法上添加<code>@IgnoreAuth</code>注解，该方法对应的接口将不需要鉴权</li><li>在可视化界面中，配置接口为公开可访问的类型</li></ul><p>例子：</p><p><strong>123</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"></span></code></pre></div><h3 id="登录可访问接口" tabindex="-1">登录可访问接口 <a class="header-anchor" href="#登录可访问接口">¶</a></h3><p>登录可访问接口，该类型的接口无需进行权限的分配，也就是说它不需要将权限分配给对应的角色等等，只要访问该接口的用户已登录了，那么就有访问该接口的权限了。</p><p>通常用下列集中方式标识接口为公开可访问的:</p><ul><li>在<code>Controller</code>类上添加<code>@IgnoreAuth(ignore = false, login = true)</code>注解，该注解标识该Controller下的所有接口都只需要登录即可访问</li><li>在<code>Controller</code>类中的方法上添加<code>@IgnoreAuth(ignore = false, login = true)</code>注解，该方法对应的接口将需要登录即可访问</li><li>在可视化界面中，配置接口为登录可访问的类型</li></ul><h2 id="可视化配置" tabindex="-1">可视化配置 <a class="header-anchor" href="#可视化配置">¶</a></h2><h2 id="权限码控制" tabindex="-1">权限码控制 <a class="header-anchor" href="#权限码控制">¶</a></h2><h2 id="前端控制" tabindex="-1">前端控制 <a class="header-anchor" href="#前端控制">¶</a></h2><h2 id="其他情况" tabindex="-1">其他情况 <a class="header-anchor" href="#其他情况">¶</a></h2><p><strong>系统超级管理员</strong></p><blockquote><p>系统超级管理员拥有最高权限，拥有对所有用户、角色、菜单、接口、权限的完全控制权，就算不进行配置也默认拥有所有权限。</p></blockquote><p><strong>登录即可访问</strong></p><hr>',30),s=[r];function i(c,d,n,h,p,u){return o(),a("div",null,s)}const v=e(t,[["render",i]]);export{g as __pageData,v as default};
