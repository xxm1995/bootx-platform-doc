import{_ as e,o as a,c as o,X as c}from"./chunks/framework.6909765d.js";const k=JSON.parse('{"title":"第三方平台对接","description":"","frontmatter":{},"headers":[],"relativePath":"platform/server/starter/第三方平台对接.md","filePath":"platform/server/starter/第三方平台对接.md"}'),d={name:"platform/server/starter/第三方平台对接.md"},t=c('<h1 id="第三方平台对接" tabindex="-1">第三方平台对接 <a class="header-anchor" href="#第三方平台对接">¶</a></h1><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>在系统中分别对应的是<code>common-starter-dingtalk</code>（钉钉对接）、<code>common-starter-wechat</code>（微信公众平台和开放平台）和<code>common-starter-wecom</code>（企业微信）三个模块</p></div><h2 id="微信-公众平台" tabindex="-1">微信（公众平台） <a class="header-anchor" href="#微信-公众平台">¶</a></h2><blockquote><p>使用<code>WxJava</code>工具包进行开发，<code>WxJava</code>项目地址：<a href="https://github.com/Wechat-Group/WxJava" target="_blank" rel="noreferrer">GITHUB</a>、<a href="https://gitee.com/binary/weixin-java-tools" target="_blank" rel="noreferrer">GITEE</a></p></blockquote><h3 id="消息模板" tabindex="-1">消息模板 <a class="header-anchor" href="#消息模板">¶</a></h3><blockquote><p>同步微信公众平台对应的模板消息模板，进行查看和管理，见<code>WeChatTemplateController</code>类</p></blockquote><h3 id="自定义菜单" tabindex="-1">自定义菜单 <a class="header-anchor" href="#自定义菜单">¶</a></h3><blockquote><p>管理微信的自定义菜单，可以导入微信平台现有菜单到系统中进行配置，也可以在系统中创建菜单模板，支持配置菜单的各项属性后保存为草稿或发布。见<code>WeChatMenuService</code>类</p></blockquote><h3 id="素材管理" tabindex="-1">素材管理 <a class="header-anchor" href="#素材管理">¶</a></h3><p>管理<code>语音</code>、<code>视频</code>、<code>图片</code>三类资源，见<code>WeChatMediaService</code>类</p><h3 id="后台接入" tabindex="-1">后台接入 <a class="header-anchor" href="#后台接入">¶</a></h3><p>通过在微信公众平台管理系统中，将用户消息设置为发送到我们指定的服务器上，项目中接收微信消息的接口地址是：<code>项目ip:端口/wechat/portal</code>。可以查看系统中对应的下列类：</p><blockquote><p><code>WeChatPortalService</code> 微信门户处理 <code>WeChatMessageRouterConfiguration</code> 微信信息路由配置，对不同的消息类型进行了绑定处理服务 <code>WxMpMessageHandler</code>的一众实现类 如<code>WeChatMsgHandler</code>文本消息处理、<code>WeChatQrScanHandler</code>微信扫码事件处理等 <code>WeChatMpMessageHandler</code> <code>WxMpMessageHandler</code>的子接口，用来支持自动关联不同的消息类型处理</p></blockquote><h3 id="微信扫码登录" tabindex="-1">微信扫码登录 <a class="header-anchor" href="#微信扫码登录">¶</a></h3><blockquote><p>需要微信公众平台设置为将用户消息设置为发送到我们指定的服务器上。</p></blockquote><p>支持微信扫码进行登录，通过<code>WeChatQrLoginController</code>进行接收，结合<code>WeChatQrScanHandler</code>扫码事件处理器，来实现系统的登录，整体的工作流程如下：</p><ol><li>前端通过<code>/token/wechat/qr/applyQrCode</code>接口来获取用于登录用QR码，在页面上进行展示供用户进行扫码</li><li>同时开启轮训任务，通过QR码的Key值，来判断是否扫码成功，也可以建立一个<code>Websocket</code>连接，通过服务端主动推送扫码事件的状态</li><li>用户扫码后，微信公共平台会推送给后台服务端一条消息，系统通过<code>WeChatQrScanHandler</code>处理器接收后，会将要进行登录用户<code>OpenId</code>写入到缓存中</li><li>前端获取到登陆成功的状态后，将QR码作为<code>authCode</code>参数并调用登录接口进行登录</li><li>系统会分配到<code>WeChatLoginHandler</code>微信登录处理器进行处理，通过接收到的QR码，从缓存中获取关联的微信<code>OpenId</code>，然后通过<code>OpenId</code>获取关联用户生成Token返回给前端，登录完成</li></ol><h3 id="消息事件处理" tabindex="-1">消息事件处理 <a class="header-anchor" href="#消息事件处理">¶</a></h3><blockquote><p>需要微信公众平台设置为将用户消息设置为发送到我们指定的服务器上。</p></blockquote><p>在微信用户和公众号产生交互的过程中，用户的某些操作会使得微信服务器通过事件推送的形式通知到开发者在开发者中心处设置的服务器地址，从而开发者可以获取到该信息并进进行处理。 通过实现<code>WeChatMpMessageHandler</code>接口并注入到<code>Bean容器中</code>，系统会自动跟相关类型的消息进行绑定，相关的类见上方<a href="#后台接入">后台接入</a></p><h2 id="企业微信" tabindex="-1">企业微信 <a class="header-anchor" href="#企业微信">¶</a></h2><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>主要是使用<code>WxJava</code>工具包对接企业微信的消息发送能力，分为机器人通知和工作通知，见<a href="./../service/notice/通知服务.html">通知服务</a></p></div><h2 id="钉钉" tabindex="-1">钉钉 <a class="header-anchor" href="#钉钉">¶</a></h2><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>主要是对钉钉访问凭证和消息发送能力进行了对接，对接方式为直接调用钉钉开放平台官方的<code>Rest</code>接口，钉钉开放平台：<a href="https://open.dingtalk.com/document/" target="_blank" rel="noreferrer">文档地址</a></p></div><h3 id="dingaccessservice" tabindex="-1">DingAccessService <a class="header-anchor" href="#dingaccessservice">¶</a></h3><blockquote><p>钉钉访问凭证服务，用来获取企业内部应用的<code>access_token</code>，调用钉钉各种能力之前，都需要先获取到<code>access_token</code>。</p></blockquote><h3 id="dingmediaservice" tabindex="-1">DingMediaService <a class="header-anchor" href="#dingmediaservice">¶</a></h3><blockquote><p>钉钉媒体文件管理，主要用来发送带有媒体或文件的消息时，上传对应的文件获取它的媒体ID（发送媒体消息参数需要传媒体ID），注意：发现钉钉媒体id只能使用一次, 和文档描述不一致，不确定现在有没有修复。</p></blockquote><h3 id="消息通知" tabindex="-1">消息通知 <a class="header-anchor" href="#消息通知">¶</a></h3><blockquote><p>分为机器人通知和工作通知，见<a href="./../service/notice/通知服务.html">通知服务</a></p></blockquote>',30),r=[t];function s(h,l,i,n,p,b){return a(),o("div",null,r)}const u=e(d,[["render",s]]);export{k as __pageData,u as default};
