import{_ as s,c as i,o as a,V as t}from"./chunks/framework.cllxpRy7.js";const g=JSON.parse('{"title":"二次开发","description":"","frontmatter":{},"headers":[],"relativePath":"platform/overview/other/二次开发.md","filePath":"platform/overview/other/二次开发.md","lastUpdated":null}'),e={name:"platform/overview/other/二次开发.md"},l=t(`<h1 id="二次开发" tabindex="-1">二次开发 <a class="header-anchor" href="#二次开发">¶</a></h1><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>脚手架已经将除个别模块外的代码全部推送到了Maven中央仓库中，在基于本脚手架进行二次开发时，不需要将所有的代码重复引入，只需要在<code>pom.xml</code>中引入相应的模块即可， Maven依赖管理工具会自动下载相应的模块，会带来代码体积小、加载速度更快、打包更迅速等优点。</p></div><h2 id="模块坐标" tabindex="-1">模块坐标 <a class="header-anchor" href="#模块坐标">¶</a></h2><p>最新版本可以查看：<a href="https://mvnrepository.com/artifact/cn.bootx.platform" target="_blank" rel="noreferrer">mvnrepository地址</a></p><p>例子：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;cn.bootx.platform&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;service.iam&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;\${latest.version}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h2 id="未发布的模块" tabindex="-1">未发布的模块 <a class="header-anchor" href="#未发布的模块">¶</a></h2><ul><li><code>bootx-start</code> 启动模块</li><li><code>bootx-demo</code> 演示模块</li><li><code>service-miniapp</code> 小程序服务</li><li><code>service-visualization</code> 可视化大屏</li></ul>`,8),n=[l];function p(h,r,o,d,k,c){return a(),i("div",null,n)}const _=s(e,[["render",p]]);export{g as __pageData,_ as default};
