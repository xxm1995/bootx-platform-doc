import{_ as s,o as a,c as n,X as l}from"./chunks/framework.6909765d.js";const d=JSON.parse('{"title":"sequence序列生成器","description":"","frontmatter":{},"headers":[],"relativePath":"platform/server/common/Sequence序列生成器.md","filePath":"platform/server/common/Sequence序列生成器.md"}'),e={name:"platform/server/common/Sequence序列生成器.md"},o=l(`<h1 id="sequence序列生成器" tabindex="-1">sequence序列生成器 <a class="header-anchor" href="#sequence序列生成器">¶</a></h1><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>注意：不适用分布式环境，因为程序是本地进行发号，多机器运行时会导致重复。分布式不出问题的话，需要号段的<code>区间步长</code>设得跟<code>步长</code>一样，然后加分布式锁，保证没事生成序列号都是通过数据中间件产生的。</p><blockquote><p>推荐在有严格要求的情况下，将<code>步长</code>与<code>区间步长</code>设置为一致的长度，保证可靠的生成。</p></blockquote></div><h2 id="功能" tabindex="-1">功能 <a class="header-anchor" href="#功能">¶</a></h2><p>通过生成一个单调递增的队列，通过生成一个区间，每次获取号码时本地进行生成，区间号码用完后生成并跳到新的区间。重启项目，也会跳到下个区间，预防出现重复的号码。支持三种数据中间件：</p><ul><li><code>redis</code></li><li><code>jdbc</code></li><li><code>Mongo</code></li></ul><h2 id="使用" tabindex="-1">使用 <a class="header-anchor" href="#使用">¶</a></h2><h3 id="参数说明" tabindex="-1">参数说明 <a class="header-anchor" href="#参数说明">¶</a></h3><ul><li><code>storeType</code>：队列区间类型，<code>redis</code>、<code>jdbc</code>、<code>Mongo</code>三种</li><li><code>keyPrefix</code>：使用<code>redis</code>类型情况下redis存储的Key前缀</li><li><code>step</code>：步长，每执行一次<code>next()</code>队列递增多少</li><li><code>rangeStep</code>：区间步长，区间的大小是多少，在区间内进行递增时，是程序本地处理的，如果重启，下次执行<code>next()</code>时会跳转到下一个区间</li><li><code>rangeStart</code>：区间开始位置，第一次执行<code>next()</code>时是从多少开，默认为0。</li></ul><h3 id="配置" tabindex="-1">配置 <a class="header-anchor" href="#配置">¶</a></h3><div class="language-yaml"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F07178;">bootx.common.sequence</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;"># 队列区间类型</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">store_type</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">redis</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;"># 使用redis存储情况下redisKey前缀</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">key_prefix</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Sequence:</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;"># 默认步长</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">step</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;"># 默认区间步长</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">range_step</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1000</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;"># 默认区间起始位置</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">range_start</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span></span></code></pre></div><ol start="2"><li>使用</li></ol><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">TestController</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">final</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Sequence</span><span style="color:#A6ACCD;"> sequence</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Operation</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">summary</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">发号器</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">GetMapping</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/sequence</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">ResResult</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">Void</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">sequence</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 通过传入业务键获取long 类型的号码,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">long</span><span style="color:#A6ACCD;"> l </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> sequence</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">next</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">cs</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 获取string</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> s </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> sequence</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">nextValue</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">cs</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> Res</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">ok</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="自定义序列生成器" tabindex="-1">自定义序列生成器 <a class="header-anchor" href="#自定义序列生成器">¶</a></h2><blockquote><p>在不同的业务场合中，区间起始位置、步长可能会不尽相同，所以支持开发者根据不同的需要，创建出自定义序列生成器，提供<code>SequenceUtil</code>工具类用来快速创建队列对象</p></blockquote><h3 id="注册到spring容器中" tabindex="-1">注册到<code>Spring</code>容器中 <a class="header-anchor" href="#注册到spring容器中">¶</a></h3><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Bean</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Sequence</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">mySeq</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 创建了一个步长为1, 区间步长为 100, 区间起始位置为0的队列</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> SequenceUtil</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">create</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">100</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h3 id="创建对象直接使用" tabindex="-1">创建对象直接使用 <a class="header-anchor" href="#创建对象直接使用">¶</a></h3><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">test</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">Sequence</span><span style="color:#A6ACCD;"> sequence </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> SequenceUtil</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">create</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">100</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// TestSeq 是队列名</span></span>
<span class="line"><span style="color:#A6ACCD;">    sequence</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">next</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">TestSeq</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="关键类" tabindex="-1">关键类 <a class="header-anchor" href="#关键类">¶</a></h2><ul><li><code>Sequence</code> 序列号生成器接口，用来生成下一个序列号</li><li><code>DefaultRangeSequence</code> 序列号区间生成器接口默认实现</li><li><code>SeqRangeManager</code> 区间管理器接口，需要实现这个接口，来控制区间的产生和移动</li><li><code>RedisSeqRangeManager</code> <code>redis</code>区间管理器实现</li><li><code>JdbcSeqRangeManager</code> <code>jdbc</code>数据库方式区间管理器实现</li><li><code>MongoSeqRangeManager</code> <code>mongo</code>数据库方式</li><li><code>SeqRange</code> 序列号区间对象类</li></ul>`,20),p=[o];function c(t,r,y,D,F,i){return a(),n("div",null,p)}const A=s(e,[["render",c]]);export{d as __pageData,A as default};
