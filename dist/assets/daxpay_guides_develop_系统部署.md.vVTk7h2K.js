import{_ as s,c as a,o as i,V as e}from"./chunks/framework.OTU5OxHT.js";const y=JSON.parse('{"title":"系统部署","description":"","frontmatter":{},"headers":[],"relativePath":"daxpay/guides/develop/系统部署.md","filePath":"daxpay/guides/develop/系统部署.md","lastUpdated":1707490731000}'),n={name:"daxpay/guides/develop/系统部署.md"},l=e(`<h1 id="系统部署" tabindex="-1">系统部署 <a class="header-anchor" href="#系统部署">¶</a></h1><h2 id="精简项目" tabindex="-1">精简项目 <a class="header-anchor" href="#精简项目">¶</a></h2><div class="tip custom-block"><p class="custom-block-title">提示</p><p>为了演示方便，系统默认安装了演示模块，如果不需要演示模块，可以在项目中去除依赖。同时为了管理方便，SDK代码也在同一个项目中，SDK构建时使用了<code>GPG</code>插件， 可能导致打包失败，需要手动去除依赖。</p></div><h3 id="后端" tabindex="-1">后端 <a class="header-anchor" href="#后端">¶</a></h3><ol><li>在项目的根目录下，打开<code>pom.xml</code>文件，找到<code>modules</code>下的<code>daxpay-single-sdk</code>，删除即可，可以同时将<code>daxpay-single-sdk</code>一块删除，这样就去除了SDK代码。</li><li>在项目<code>daxpay-single/daxpay-single-start</code>中打开该目录下的<code>pom.xml</code>文件，找到支付演示模块<code>daxpay-single-demo</code>的依赖，删除即可，也可以同时删除对应的代码，这样就去除了演示模块。</li><li>在项目<code>daxpay-single/daxpay-single-start</code>模块中，找到对应的<code>application-*.yml</code>配置文件，将其中关于<code>daxpay.demo.*</code>相关的配置删除。</li><li>在数据库中删除<code>dax_pay_demo</code>开头的相关表。</li></ol><h3 id="前端" tabindex="-1">前端 <a class="header-anchor" href="#前端">¶</a></h3><ol><li>在项目中<code>src/views</code>找到<code>paydemo</code>模块删除即可。</li><li>在后台管理端找到<code>paydemo</code>相关的菜单进行删除，或者直接在数据库中进行删除也可。</li></ol><h2 id="后端构建" tabindex="-1">后端构建 <a class="header-anchor" href="#后端构建">¶</a></h2><blockquote><p>由于<code>DaxPay</code>底层基于<code>Bootx-Platform</code>进行构建，所以构建方式也类似<code>Bootx-Platform</code>，具体构建方式请参考对应文档 <a href="/platform/overview/config/后端部署.html">后端部署</a>， <strong>不同点是<code>DaxPay</code>生成的可执行Jar文件在<code>daxpay-single-start</code>模块下</strong></p></blockquote><h2 id="前端构建" tabindex="-1">前端构建 <a class="header-anchor" href="#前端构建">¶</a></h2><blockquote><p>由于<code>DaxPay</code>底层基于<code>Bootx-Platform</code>进行构建，所以构建方式也类似<code>Bootx-Platform</code>，具体构建方式请参考对应文档 <a href="/platform/overview/config/前端部署.html">前端部署</a></p></blockquote><h2 id="部署示例-前后端独立部署" tabindex="-1">部署示例(前后端独立部署) <a class="header-anchor" href="#部署示例-前后端独立部署">¶</a></h2><div class="tip custom-block"><p class="custom-block-title">提示</p><p>因为支付系统会涉及到一些三方支付网关的回调，以及例如微信授权域名、jsapi安全域名的限制，所以部署时，我们需要保证访问的入口地址尽量少，从而尽量少的占用如微信公众平台各类域名的占用。 这样就需要我们对项目进行一些配置，从而实现这些诉求。</p></div><h3 id="域名分配" tabindex="-1">域名分配 <a class="header-anchor" href="#域名分配">¶</a></h3><blockquote><p>假定我们拥有一个域名<code>www.daxpay.com</code>，并且该域名已经备案，下面的配置是独立部署模式的配置示例：</p></blockquote><table><thead><tr><th>项目</th><th>域名分配</th><th>说明</th></tr></thead><tbody><tr><td>server</td><td><a href="https://www.daxpay.com/server/" target="_blank" rel="noreferrer">https://www.daxpay.com/server/</a></td><td>后端独立部署类不同的机器样，通常也不会被直接被访问，所以做个请求转发即可满足回调和接口调用的需求</td></tr><tr><td>H5</td><td><a href="https://www.daxpay.com/h5/" target="_blank" rel="noreferrer">https://www.daxpay.com/h5/</a></td><td>H5手机端通常使用手机访问，同时在微信中的访问话，需要占用微信授权域名和jsapi安全域名的数量，所以和PC前端放到了同一个域名下</td></tr><tr><td>PC</td><td><a href="https://www.daxpay.com/" target="_blank" rel="noreferrer">https://www.daxpay.com/</a></td><td>PC端是用户和管理员访问的入口，所以让其可以直接访问</td></tr></tbody></table><h3 id="移动端配置" tabindex="-1">移动端配置 <a class="header-anchor" href="#移动端配置">¶</a></h3><blockquote><p>分别提供了前端嵌入到后端中和独立部署两种模式，区别是网站的根目录和接口的前缀配置不同，下面的配置是独立部署模式的<code>.env.production</code>配置示例：</p></blockquote><div class="language-properties vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">properties</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 发布路径</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">VITE_PUBLIC_PATH</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> = /h5</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 接口前缀</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">VITE_GLOB_API_URL_PREFIX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> = /server</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 接口地址留空即可</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">VITE_GLOB_API_URL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span></span></code></pre></div><h3 id="pc端配置" tabindex="-1">PC端配置 <a class="header-anchor" href="#pc端配置">¶</a></h3><blockquote><p>PC端可以不进行额外的配置，直接打包即可。</p></blockquote><h3 id="nginx配置" tabindex="-1">Nginx配置 <a class="header-anchor" href="#nginx配置">¶</a></h3><blockquote><p>此处前端的静态文件，为了方便部署，我们分别放在了两个目录下<code>web</code>和<code>h5</code>。项目启用了HTTPS，具体配置过程请自行查阅资料，静态文件的分布以及转发部分配置如下:</p></blockquote><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 后端服务请求转发, </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">location</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /server/ {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    proxy_set_header</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Host </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$host; </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    proxy_set_header</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> X-Real-IP </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$remote_addr; </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    proxy_set_header</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> X-Forwarded-For </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$proxy_add_x_forwarded_for; </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 后台接口地址</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    proxy_pass</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> http://1.1.1.1:9000/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    proxy_redirect</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 处理跨域</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    add_header</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Access-Control-Allow-Origin </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    add_header</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Access-Control-Allow-Headers X-Requested-With</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    add_header</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Access-Control-Allow-Methods </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 将根路径映射到web前端</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">location</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> / {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # PC前端静态文件所在的路径</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    alias</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /www/sites/www.daxpay.com/index/web/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 将h5路径映射到h5前端</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">location</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /h5/ {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # h5前端静态文件所在的路径</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    alias</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /www/sites/www.daxpay.com/index/h5/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="部署示例-前端嵌入在后端中" tabindex="-1">部署示例(前端嵌入在后端中) <a class="header-anchor" href="#部署示例-前端嵌入在后端中">¶</a></h2><div class="tip custom-block"><p class="custom-block-title">提示</p><p>有时候部署时不方便安装Nginx，又或者客户技术水平有限，只会简单这java启停命令，所以将前端嵌入在后端中，这样可以减少部署的复杂度。只需要启动起来后端即可。 <strong>注意：前端路由方式需要为hash模式</strong></p></div><h3 id="pc配置" tabindex="-1">PC配置 <a class="header-anchor" href="#pc配置">¶</a></h3><blockquote><p>PC端打包时只需要修改<code>接口前缀</code>即可</p></blockquote><div class="language-properties vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">properties</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 发布路径</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">VITE_PUBLIC_PATH</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=/</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 接口前缀</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">VITE_GLOB_API_URL_PREFIX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=/server</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 接口地址留空即可</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">VITE_GLOB_API_URL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span></span></code></pre></div><h3 id="h5配置" tabindex="-1">H5配置 <a class="header-anchor" href="#h5配置">¶</a></h3><blockquote><p>H5端访问是通过二级目录进行访问的，所以打包时需要修改即可<code>发布路径</code>和<code>接口前缀</code></p></blockquote><div class="language-properties vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">properties</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 发布路径， 需要配置为放在后端中的的路径</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">VITE_PUBLIC_PATH</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=/h5</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 接口前缀, 因为已经嵌入在了后端中了</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">VITE_GLOB_API_URL_PREFIX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=/</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 接口地址留空即可</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">VITE_GLOB_API_URL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span></span></code></pre></div><h3 id="后端配置" tabindex="-1">后端配置 <a class="header-anchor" href="#后端配置">¶</a></h3>`,33),p=[l];function t(h,d,k,o,r,c){return i(),a("div",null,p)}const E=s(n,[["render",t]]);export{y as __pageData,E as default};
