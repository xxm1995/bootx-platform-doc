import{_ as t,o,c as a,X as e}from"./chunks/framework.6909765d.js";const p="/assets/1.3a158dd5.png",f=JSON.parse('{"title":"什么是安全 ?","description":"","frontmatter":{},"headers":[],"relativePath":"platform/safety/什么是安全.md","filePath":"platform/safety/什么是安全.md"}'),s={name:"platform/safety/什么是安全.md"},r=e('<h1 id="什么是安全" tabindex="-1">什么是安全 ? <a class="header-anchor" href="#什么是安全">¶</a></h1><h2 id="概述" tabindex="-1">概述 <a class="header-anchor" href="#概述">¶</a></h2><p>在我们解决问题前，⾸先需要明⽩我们的问题是什么，在明⽩了问题是什么，我们才能从问题的产⽣逻辑和问题的运转逻辑中找到问题出现的点和解决的办法。 正如《道德经》第⼗六章所说：</p><blockquote><p>致虚极，守静笃，万物并作，吾以观复。夫物芸芸，各归其根。归根⽈静，静⽈复命。复命⽈常，知常⽈明，不知常，妄作凶。 知常容，容乃公，公乃全，全乃天，天乃道，道乃久，没身不殆。</p></blockquote><p>需要“知常&quot;，“不知常&quot;最后只能导致“妄作凶&quot;，“知常&quot;后才能“容&quot;，才能“公&quot;，才能“全&quot;，最终才能“没身不殆&quot;。也就是说，我们了解事物，了解问题，需要知道其运转本质，知道其根本逻辑之后，才能对该问题提出 解决方法，提出自己的⻅解，否则随意发表自己的⻅解和凭感觉处理问题只会“妄作凶&quot;。⽽在了解本质后才能提出周“全&quot;、包“容&quot;、符合道(⾃然规律)的解决方案和办法，才能永久不衰，“没身不殆&quot;。</p><p>安全是⼀个普世存在的问题，我们可以从现实世界⼊手，来看下面⼀个场景：</p><blockquote><p>⽕⻋站、机场里，在乘客们开始正式旅程之前，都有⼀个必要的程序：安全检查。机场的安全检查，会扫描乘客的⾏李箱，检查乘客身上是否携带打⽕机、可燃液体等危险物品。</p></blockquote><p>抽象地说，这种安全检查，就是过滤掉有害的、危险的东⻄。因为在⻜⾏的过程中，⻜机远离地⾯，如果发⽣危险，将会直接危害到乘客们的⽣命安全。 因此，⻜机是⼀个⾼度敏感和重要的区域，任何有危 害的物品都不应该进⼊这⼀区域。为达到这⼀⽬标，登机前到安全检查就是⼀个⾮常有必要的步骤。</p><p>从安全的⻆度来看，我们将不同重要程度的区域划分出来：</p><p><img src="'+p+'" alt="img.png"></p><p>通过⼀个安全检查(过滤、净化)的过程，可以梳理未知的⼈或物，使其变得可信任。被划分出来的具有 不同信任级别的区域，我们称为信任域，划分两个不同信任域的边界，我们称为信任边界。</p><p>数据从⾼等级的信任域流向低等级的信任域，是不需要进过安全检查的；数据从低等级的信任域流向⾼ 等级的信任域，则需要经过信任边界的安全检查。</p><p>所以，<strong>安全问题的本质是信任的问题</strong>。</p><p>⼀切安全⽅案设计的基础，都是建⽴在信息关系上的。我们必须相信⼀些东⻄，必须有⼀些最基本的假 设，安全⽅案才能得以建⽴；如果我们否定⼀切，安全⽅案就会如⽆源之⽔，⽆根之⽊，⽆法设计，也 ⽕⻋站、机场里，在乘客们开始正式旅程之前，都有⼀个必要的程序：安全检查。机场的安全检查， 会扫描乘客的⾏李箱，检查乘客身上是否携带打⽕机、可燃液体等危险物品。⽆法完成。</p><h2 id="安全三要素" tabindex="-1">安全三要素 <a class="header-anchor" href="#安全三要素">¶</a></h2><p>要全⾯地认识⼀个安全问题，我们有很多种办法，但⾸先要理解安全问题的组成属性。前⼈通过⽆数实践，最后将安全的属性总结为安全三要素，简称CIA</p><p>安全三要素是安全的基本组成元素，分别是<strong>机密性(Confidentiality)</strong>、<strong>完整性(Integrity)</strong>、<strong>可用性(Availability)</strong>。</p><p><strong>机密性</strong>要求保护数据内容不能泄露，加密是实现机密性要求的常⻅⼿段。</p><p><strong>完整性</strong>则要求保护数据内容是完整、没有被篡改的。常⻅的保证⼀致性的技术⼿段是数字签名。</p><p><strong>可用性</strong>要求保护资源是“随需⽽得&quot;，比如拒绝服务攻击(DOS)攻击破坏的就是安全的可用性。</p>',20),n=[r];function _(c,i,d,l,u,h){return o(),a("div",null,n)}const q=t(s,[["render",_]]);export{f as __pageData,q as default};
