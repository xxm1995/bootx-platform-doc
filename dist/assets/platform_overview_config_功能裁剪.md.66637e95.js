import{_ as s,o as a,c as n,X as o}from"./chunks/framework.6909765d.js";const C=JSON.parse('{"title":"功能裁剪","description":"","frontmatter":{},"headers":[],"relativePath":"platform/overview/config/功能裁剪.md","filePath":"platform/overview/config/功能裁剪.md"}'),l={name:"platform/overview/config/功能裁剪.md"},e=o(`<h1 id="功能裁剪" tabindex="-1">功能裁剪 <a class="header-anchor" href="#功能裁剪">¶</a></h1><div class="tip custom-block"><p class="custom-block-title">TIP</p><ul><li>对于不同类型的系统，我们要需要的功能也不尽相同，此时对于用不到的功能，我们就可能需要去除，下面就会说明一些非必须的功能和模块如何进行去除。</li><li>不同模块之间非必要不会有依赖，通常将<code>bootx-start</code>的<code>pom.xml</code>中的<code>bootx-demo</code>模块删除后，启动时就默认不依赖任何业务模块，之后就可以选择要引入哪些模块功能。</li></ul></div><h2 id="去除rabbitmq依赖" tabindex="-1">去除RabbitMQ依赖 <a class="header-anchor" href="#去除rabbitmq依赖">¶</a></h2><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>在使用支付服务<code>service-payment</code>的情况下，不推荐去除<code>RabbitMQ</code>的依赖，如果去除的话，需要将对应的消息通知功能重新实现一份。</p></div><ol><li>在<code>service-payment</code>模块和<code>bootx-demo</code>模块下的<code>pom.xml</code>文件中，删掉<code>common-rabbitmq</code>的依赖，<div class="language-xml"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">&lt;!-- rabbitmq消息队列 --&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">dependency</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">groupId</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">cn.bootx.platform</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">groupId</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">artifactId</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">common-rabbitmq</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">artifactId</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">version</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">\${bootx-platform.version}</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">version</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">dependency</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div></li><li>删掉<code>service-payment</code>中用到消息通知的代码，主要是以下这些类： <ul><li><code>cn.bootx.payment.configuration.PaymentRabbitMqConfiguration</code> 支付相关消息队列配置</li><li><code>cn.bootx.payment.mq.PaymentEventSender</code> 支付中心消息发送器</li><li><code>cn.bootx.payment.mq.PaymentMessageListener</code>，消息接收</li></ul></li><li>删掉<code>bootx-demo</code>中用到消息通知的代码，主要是<code>cn.bootx.demo.core.mq.rabbit</code>包下的的类。</li><li>在<code>bootx-start</code>模块下的配置文件中删掉对应的配置项，然后可以删掉<code>common-rabbitmq</code>模块，至此项目中的<code>RabbitMQ</code>依赖就已经全部去除</li></ol><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>不去除项目中RabbitMQ依赖的情况下，将配置文件中配置项<code>bootx.common.rabbit.enable</code>设为<code>false</code>，同时配合<code>@ConditionalOnRabbit</code>注解在消息对象声明配置类的上面， 让它不注册到Spring容器中，这样不配置<code>RabbitMQ</code>连接地址也不会一直报错，只会在启动的时候抛出一次连接失败错误，其他时候就可以正常运行，就不需要对代码进行改动。</p></div><p>注解说明</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * 判断系统是否在启用了Rabbit, 未启用的情况下不将Bean注册到系统中</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * 使用场景: 在不使用Rabbit中间件的场合里, 但未去除Rabbit相关代码的情况下, 通过配置文件中关闭Rabbit选项, 来实现系统的正常使用,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * 不这样处理会导致RabbitMQ进行无限尝试重连服务器</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * 需要在使用 @RabbitListener 标注方法的类上加上这个注解, 让这个对象不注册到系统中</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * </span><span style="color:#F78C6C;font-style:italic;">@author</span><span style="color:#676E95;font-style:italic;"> xxm</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * @date 2022/12/12</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Target</span><span style="color:#89DDFF;">({</span><span style="color:#A6ACCD;">ElementType</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">TYPE</span><span style="color:#89DDFF;">})</span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Retention</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">RetentionPolicy</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">RUNTIME</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Documented</span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Conditional</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">OnRabbitEnable</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">class</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">ConditionalOnRabbit</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>注解使用</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * 通常放在有 @RabbitListener 标注处理方法的类上，这样就不会触发无限报错了</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * </span><span style="color:#F78C6C;font-style:italic;">@author</span><span style="color:#676E95;font-style:italic;"> xxm</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * @date 2022/5/30</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Component</span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">ConditionalOnRabbit</span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">RequiredArgsConstructor</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">DemoRabbitMqMessageListener</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * 测试MQ消息</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">RabbitListener</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">queues</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">demo.testMq</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">payCancel</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">ResResult</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">String</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">hello</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        log</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">info</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">测试MQ消息 :{}</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> hello</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="去除mongodb依赖" tabindex="-1">去除MongoDB依赖 <a class="header-anchor" href="#去除mongodb依赖">¶</a></h2><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>目前<code>MongoDB</code>用于了日志和文件存储，以及作为一种<code>序列生成器</code>的实现方式所依赖，在去掉<code>MongoDB</code>的依赖后，需要将这几种配置设置为非MongoDB的方式。 在不去除<code>MongoDB</code>依赖的情况下，不配置连接地址也可以正常运行，只会在启动后报一次连接超时的错误</p></div><h2 id="去除plumelog日志收集" tabindex="-1">去除Plumelog日志收集 <a class="header-anchor" href="#去除plumelog日志收集">¶</a></h2><ol><li>在项目<code>common-log</code>模块中<code>pom.xml</code>文件中去除<code>plumelog-lite-spring-boot-starter</code>依赖</li><li>在项目\`\`下的<code>logback-spring.xml</code>配置文件中删掉<code>&lt;include resource=&quot;cn/bootx/common/log/logback-plumelog.xml&quot;/&gt;</code>和<code> &lt;appender-ref ref=&quot;plumelog&quot;/&gt;</code>两行</li></ol><blockquote><p>想要彻底去除可以全局搜索一下<code>plumelog</code>关键字，把对应的代码和配置删除即可</p></blockquote><h2 id="去除其他功能" tabindex="-1">去除其他功能 <a class="header-anchor" href="#去除其他功能">¶</a></h2><p>删除对应模块和对应的表文件，然后将用到该模块的代码进行修正即可。</p>`,17),p=[e];function t(c,i,r,y,D,d){return a(),n("div",null,p)}const b=s(l,[["render",t]]);export{C as __pageData,b as default};
