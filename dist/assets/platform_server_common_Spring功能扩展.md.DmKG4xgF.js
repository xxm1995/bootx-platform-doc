import{_ as s,c as i,o as a,a8 as n}from"./chunks/framework.riYNsadV.js";const g=JSON.parse('{"title":"Spring 功能扩展","description":"","frontmatter":{},"headers":[],"relativePath":"platform/server/common/Spring功能扩展.md","filePath":"platform/server/common/Spring功能扩展.md","lastUpdated":1692349911000}'),l={name:"platform/server/common/Spring功能扩展.md"},p=n(`<h1 id="spring-功能扩展" tabindex="-1">Spring 功能扩展 <a class="header-anchor" href="#spring-功能扩展">¶</a></h1><h2 id="功能" tabindex="-1">功能 <a class="header-anchor" href="#功能">¶</a></h2><ul><li>启用hutool的<code>SpringUtil</code>工具类，直接可以使用</li><li>配置线程池，并用TTL进行包装，用于异步线程中获取环境数据，如请求头信息</li><li>提供<code>@CountTime</code>方法计时注解，快速打印方法耗时时间</li><li>提供<code>CorsFilter</code>过滤器处理跨域请求，自动处理跨域问题</li></ul><h2 id="使用" tabindex="-1">使用 <a class="header-anchor" href="#使用">¶</a></h2><h3 id="线程池使用说明" tabindex="-1">线程池使用说明 <a class="header-anchor" href="#线程池使用说明">¶</a></h3><p>线程池使用时需要进行指定配置的TTL包装过的线程池，否则会发生线程变量丢失的问题，这两个线程池分别是</p><ul><li><code>ExecutorService</code> <code>bean</code>名称为：asyncExecutorService</li><li><code>Executor</code> <code>bean</code>名称为：asyncExecutor</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> org.springframework.scheduling.annotation.Async;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.util.concurrent.Executor;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.util.concurrent.ExecutorService;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Component</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RequiredArgsConstructor</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TestController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 执行器</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> final</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Executor asyncExecutor;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 执行器服务</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> final</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ExecutorService asyncExecutorService;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 异步方法指定线程池</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;asyncExecutor&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sendHtmlMail</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MailMailParam </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">mailParam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="counttimeaop使用" tabindex="-1"><code>@CountTimeAop</code>使用 <a class="header-anchor" href="#counttimeaop使用">¶</a></h3><blockquote><p>注解放在方法上即可生效，注意标注的方法需要可能内Spring Aop切面获取到，否则不生效</p></blockquote><p>参数:</p><ul><li>实现中</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CountTime</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> addRolePath</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Long roleId, List</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Long</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> permissionIds) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="corsfilter使用" tabindex="-1"><code>CorsFilter</code>使用 <a class="header-anchor" href="#corsfilter使用">¶</a></h3><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>过滤器过滤器默认开启，可以通过配置文件进行关闭</p></div><h2 id="参数配置" tabindex="-1">参数配置 <a class="header-anchor" href="#参数配置">¶</a></h2><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">bootx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  common</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    spring</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      # 开启cors跨域处理</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      cors</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # 允许跨域发送身份凭证 </span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        enable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # 预检请求有效期(秒)</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        max-age</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3600</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # 允许的请求头</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        allowed-headers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: *</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # 允许的请求方法</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        allowed-methods</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: *</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # 允许跨域的源为，注意与origin:进行区分</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        allowed-origin-patterns</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: *</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      executor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # 线程池维护线程的最少数量</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        core-pool-size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # 缓存队列容量</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        max-pool-size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # 缓存队列容量</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        queue-capacity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5000</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # 保持活动秒数</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        keep-alive-seconds</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">60</span></span></code></pre></div><h2 id="相关类" tabindex="-1">相关类 <a class="header-anchor" href="#相关类">¶</a></h2><ul><li><code>CountTimeAop</code> 方法执行耗时记录处理切面</li><li><code>AsyncExecutorConfiguration</code> 异步线程池配配置，使用TTL容器进行包装</li><li><code>WebServletUtil</code> web服务器工具类，可以获取当前请求的 <code>HttpServletRequest</code> 对象</li><li><code>SpringCorsConfiguration</code> Cors跨域处理配置</li></ul>`,19),e=[p];function h(t,k,r,d,c,o){return a(),i("div",null,e)}const y=s(l,[["render",h]]);export{g as __pageData,y as default};
