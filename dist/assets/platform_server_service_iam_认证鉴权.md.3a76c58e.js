import{_ as s,o as a,c as n,X as o}from"./chunks/framework.6909765d.js";const C=JSON.parse('{"title":"认证鉴权","description":"","frontmatter":{},"headers":[],"relativePath":"platform/server/service/iam/认证鉴权.md","filePath":"platform/server/service/iam/认证鉴权.md"}'),e={name:"platform/server/service/iam/认证鉴权.md"},l=o(`<h1 id="认证鉴权" tabindex="-1">认证鉴权 <a class="header-anchor" href="#认证鉴权">¶</a></h1><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>基于功能服务中的<code>登录鉴权starter</code>进行实现，同时将连带介绍一下<code>登录鉴权</code>模块的详细使用方式。 其中认证和鉴权是两个概念，认证是用户登录成功后，用户信息会存储到<code>Redis</code>中，而鉴权则是用户登录成功后，会根据用户角色权限进行权限的校验， 如果用户没有权限则无法进行访问，对应到安全上就是进行垂直方向的安全控制。鉴权相关的说明单独放到了<a href="./访问权限管理.html">访问权限管理</a>模块中。</p></div><h2 id="登录认证" tabindex="-1">登录认证 <a class="header-anchor" href="#登录认证">¶</a></h2><h2 id="扩展或修改登录方式" tabindex="-1">扩展或修改登录方式 <a class="header-anchor" href="#扩展或修改登录方式">¶</a></h2><h3 id="默认的账号密码登录实现" tabindex="-1">默认的账号密码登录实现 <a class="header-anchor" href="#默认的账号密码登录实现">¶</a></h3><p>通过实现 <code>UsernamePasswordAuthentication</code> 接口并注入到Spring容器中即可，见IAM模块中的<code>PasswordLoginHandler</code>实现， 是否验证码以及验证码有效时间具体在实现类自己进行手动实现。</p><h3 id="第三方登录实现" tabindex="-1">第三方登录实现 <a class="header-anchor" href="#第三方登录实现">¶</a></h3><p>通过实现 <code>OpenIdAuthentication</code> 接口并注入到Spring容器中即可，见IAM模块中的<code>PhoneLoginHandler</code>和<code>WeChatLoginHandler</code>等实现</p><h3 id="其他登录实现" tabindex="-1">其他登录实现 <a class="header-anchor" href="#其他登录实现">¶</a></h3><p>通过实现鉴权抽象接口<code>AbstractAuthentication</code>进行编写</p><h3 id="调用登录" tabindex="-1">调用登录 <a class="header-anchor" href="#调用登录">¶</a></h3><p><code>TokenEndpoint</code> 接收登录相关请求，通过分发到具体登录实现类进行登录，登录成功后保存<code>Token</code>到<code>Redis</code>中</p><h2 id="访问鉴权" tabindex="-1">访问鉴权 <a class="header-anchor" href="#访问鉴权">¶</a></h2><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>目前对请求接口进行控制的主要分为三类：第一种是无需登录就可以访问，第二种是登陆后可以访问，第三种是用户必须有相对应的权限才可以访问。请求后台接口时， 多种配置中任一方式认证通过后，就可以进行请求。</p></div><h3 id="不需要登录可访问" tabindex="-1">不需要登录可访问 <a class="header-anchor" href="#不需要登录可访问">¶</a></h3><p>通过在请求接口方法上标注<code>@IgnoreAuth</code>注解并设置<code>ignore</code>为<code>true</code>，或着在配置文件中的<code>bootx.starter.auth.ignoreUrls</code>项进行配置相关路径</p><h3 id="登陆后可访问" tabindex="-1">登陆后可访问 <a class="header-anchor" href="#登陆后可访问">¶</a></h3><p>通过在请求接口方法上标注<code>@IgnoreAuth</code>注解并设置<code>login</code>为<code>true</code>，且<code>ignore</code>为<code>false</code>。</p><h3 id="权限控制" tabindex="-1">权限控制 <a class="header-anchor" href="#权限控制">¶</a></h3><p>主要分为两种：通过Web管理端配置角色与接口的关联关系，或是通过在请求方法上标注<code>@PermCode</code>注解，系统会根据当前用户拥有角色所对应的权限码进行匹配， 如果配置有多个权限码，任一匹配通过即可访问。</p><h3 id="权限码控制样例" tabindex="-1">权限码控制样例 <a class="header-anchor" href="#权限码控制样例">¶</a></h3><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Tag</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">name</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">角色菜单权限关系</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">RestController</span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">RequestMapping</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/role/menu</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">RequiredArgsConstructor</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">RoleMenuController</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">final</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">RolePermService</span><span style="color:#A6ACCD;"> rolePermService</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">PermCode</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Admin</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Operation</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">summary</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">根据角色id获取关联权限id集合(包含资源和菜单)</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">GetMapping</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/findPermissionIdsByRole</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">ResResult</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">List</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">Long</span><span style="color:#89DDFF;">&gt;&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">findPermissionIdsByRole</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">Long</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">roleId</span><span style="color:#89DDFF;">,</span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">clientCode</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> Res</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">ok</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">rolePermService</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">findPermissionIdsByRole</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">roleId</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">clientCode</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div>`,22),p=[l];function c(t,r,d,D,i,y){return a(),n("div",null,p)}const A=s(e,[["render",c]]);export{C as __pageData,A as default};
